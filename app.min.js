'use strict';const express=require("express"),app=express(),mongoose=require("mongoose"),flash=require("connect-flash"),session=require("express-session"),upload=require("express-fileupload"),bodyParser=require("body-parser"),handlebars=require("express-handlebars"),Handlebars=require("handlebars"),port=process.env.PORT||1777,path=require("path"),passport=require("passport"),{allowInsecurePrototypeAccess}=require("@handlebars/allow-prototype-access"),methodOverride=require("method-override"),{mongodbURI}=
require("./config/db");mongoose.set("useFindAndModify",!1);mongoose.Promise=global.Promise;mongoose.set("useCreateIndex",!0);mongoose.connect(mongodbURI,{useNewUrlParser:!0,useUnifiedTopology:!0}).then(a=>console.log("Connected")).catch(a=>console.log(a));app.use(express.static(path.join(__dirname,"public")));const {select,generate_date,ifeq,paginate}=require("./helpers/handlebars-helpers");
app.engine("handlebars",handlebars({defaultLayout:"home",helpers:{select,generate_date,ifeq,paginate},partialsDir:path.join(__dirname,"views/layouts/partials"),handlebars:allowInsecurePrototypeAccess(Handlebars)}));app.use(upload());app.set("view engine","handlebars");app.use(bodyParser.json());app.use(bodyParser.urlencoded({extended:!0}));app.use(session({secret:"tonyAtuoha",resave:!0,saveUninitialized:!0}));app.use(flash());app.use(methodOverride("_method"));
app.use((a,b,c)=>{b.locals.success_msg=a.flash("success_msg");b.locals.error_msg=a.flash("error_msg");b.locals.error=a.flash("error");b.locals.loggedUser=a.user||null;c()});app.use(passport.initialize());app.use(passport.session());const home=require("./routes/home/index");app.use("/",home);const logs=require("./routes/logins/index");app.use("/logs",logs);app.listen(port,()=>{console.log(`Running on port ${port}`)});